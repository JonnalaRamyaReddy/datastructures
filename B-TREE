#include<stdio.h>
#include<stdlib.h>
#define T 3
struct Node
{
int n;
int Keys[2*T-1];
struct Node *children[2*T];
int leaf;
};
struct Node *createNode(int t,int leaf)
{
  struct Node *node = (struct Node*) malloc(sizeof(struct Node));
  node->n = 0;
  node->leaf = leaf;
  return node;
}
int search(struct Node *root, int key) 
{
  int i;
  for(i=0; i<root->n; i++) 
  {
    if(key == root->keys[i]) 
	{
      return 1;
    }
  }
  if (root->leaf == 0) 
  {
    for(i=0; i<root->n; i++) 
	{
      if(search(root->children[i], key)) 
	  {
        return 1;  
      }
    }
  }

  return 0;
}
void display(struct Node *root) 
{
  int i;
  for(i=0; i<root->n; i++) 
  {
    printf("%d ", root->keys[i]);
  }
  if(!root->leaf) 
  {
    for(i=0; i<root->n+1; i++) 
	{
      display(root->children[i]);
    } 
  }
}
void insert(struct Node *root, int key) 
{
  if(root->leaf == 1) 
  {
    root->keys[root->n] = key;
    root->n++;
    return;
  } else 
  {
    int i=0;
    while(i<root->n && key > root->keys[i]) 
	{
      i++;
    }
    insert(root->children[i], key);
  }
}
struct Node *createBTree(int t) 
{
  struct Node *root = createNode(t, 1);
  return root;
}
int main() 
{
  struct Node *root = createBTree(T);
  insert(root, 8);
  insert(root, 9); 
  insert(root, 10);
  insert(root, 11);
  printf("B-Tree:\n");
  display(root);
  printf("\nSearch for key 10: %d", search(root, 10));  
  printf("\nSearch for key 15: %d", search(root, 15));

  return 0;
}
